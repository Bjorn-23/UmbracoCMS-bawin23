@using System.Web
@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage

@{
    Layout = "mainLayout.cshtml";
    var pageTitle = Model?.Value<string>("pageTitle") ?? "";
    var pageName = Model?.Name;
    ViewBag.Title = (!string.IsNullOrEmpty(pageTitle)) ? pageTitle : pageName;

    var placeSideBarToLeft = (Model?.Value<bool>("placeSideBarToLeft") == true) ? "sidebar-left" : "";


    var queryString = UmbracoContext.CleanedUmbracoUrl.Query;

    // Remove the leading "?" if it exists
    queryString = queryString.TrimStart('?');

    // Split the query string into key-value pairs
    var queryParams = queryString.Split('&');

    // Create a dictionary to store the parameters
    var queryDictionary = new Dictionary<string, string>();

    // Loop through the pairs and split them into key and value
    foreach (var param in queryParams)
    {
        var keyValue = param.Split('=');
        if (keyValue.Length == 2)
        {
            queryDictionary[keyValue[0]] = keyValue[1];
        }
    }

    // Access the individual parameters
    var nameParam = queryDictionary.ContainsKey("param") ? HttpUtility.UrlDecode(queryDictionary["param"]) : "";
    var emailParam = queryDictionary.ContainsKey("paramEmail") ? HttpUtility.UrlDecode(queryDictionary["paramEmail"]) : "";
    var messageParam = queryDictionary.ContainsKey("paramMessage") ? HttpUtility.UrlDecode(queryDictionary["paramMessage"]) : "";
    var paramFormSubmitted = queryDictionary.ContainsKey("paramFormSubmitted") ? HttpUtility.UrlDecode(queryDictionary["paramFormSubmitted"]) : "";
    var paramFormSuccess = queryDictionary.ContainsKey("paramFormSuccess") ? HttpUtility.UrlDecode(queryDictionary["paramFormSuccess"]) : "";

    bool error_name = false;
    bool error_email = false;
    bool error_message = false;

    if (paramFormSubmitted == "true")
    {
        //Check if any params are empty and if they are the set the class of corresponding input field to: "form-invalid-input"
        bool.TryParse(string.IsNullOrEmpty(nameParam).ToString(), out error_name);
        bool.TryParse(string.IsNullOrEmpty(emailParam).ToString(), out error_email);
        bool.TryParse(string.IsNullOrEmpty(messageParam).ToString(), out error_message);
    }

    ViewData["name"] = nameParam;
    ViewData["email"] = emailParam;
    ViewData["message"] = messageParam;
    ViewData["form-success"] = paramFormSuccess;
}

@await Html.PartialAsync("./partials/static/breadcrumbs.cshtml")

<section id="service-details" class="list-page bg-light">
    <div class="container @placeSideBarToLeft">

        @if (Model != null)
        {
            <div class="rich-text-main">
                @Model.Value("pageContent")
            </div>
        }

        <div class="sidebar-divider"></div>

        <div class="sidebar bg-light">
            <div class="about-us">
                <h4>About us</h4>
                <div class="image-wrapper">
                    <img src="~/media/t2jgm5im/statisticadvisor1.png" alt="@pageTitle">
                </div>
                <p>Dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non </p>
            </div>

            @await Html.PartialAsync("partials/static/onlineSupportForm.cshtml")

        </div>
    </div>
</section>

<section id="service-details-contact-form" class="list-page bg-light">
    <div class="container">
        <div class="form-wrapper">
            <div class="form-header">
                <h4>Have a question?</h4>
                @if (ViewData["form-success"]?.ToString() == "true")
                {
                    <p class="form-success">Form submitted succesfully</p>
                }
            </div>

            @using (Html.BeginUmbracoForm("HandleContactRequestSubmit", "ContactSurface", FormMethod.Post))
            {
                <div class="input-group form-name">
                    <label class="form-label" for="formName">Name</label>
                    <input id="formName" name="name" type="text" placeholder="Name" value="@ViewData["name"]">
                    <span class="form-input-error @((error_name) ? "form-invalid-input" : null)">You must enter your name</span>
                </div>
                <div class="input-group form-email">
                    <label class="form-label" for="formEmail">E-mail</label>
                    <input id="formEmail" name="email" type="text" placeholder="Email" value="@ViewData["email"]">
                    <span class="form-input-error @((error_email) ? "form-invalid-input" : null)">You must enter a valid e-mail address</span>

                </div>
                <div class="input-group form-message">
                    <label class="form-label" for="formMessage">Message</label>
                    <textarea id="formMessage" name="message" rows="10" placeholder="Question">@ViewData["message"]</textarea>
                    <span class="form-input-error @((error_message) ? "form-invalid-input" : null)">You must enter a message</span>

                </div>
                <button type="submit" class="btn-primary">Submit</button>
            }
        </div>
    </div>
</section>