@using System.Web
@using Umbraco.Cms.Core.Models.Blocks;
@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@{
    Layout = "mainLayout.cshtml";
    ViewBag.Title = Model?.Value("pageTitle") ?? null;

    var queryString = UmbracoContext.CleanedUmbracoUrl.Query;

    queryString = queryString.TrimStart('?');
    var queryParams = queryString.Split('&');
    var queryDictionary = new Dictionary<string, string>();

    foreach (var param in queryParams)
    {
        var keyValue = param.Split('=');
        if (keyValue.Length == 2)
        {
            queryDictionary[keyValue[0]] = keyValue[1];
        }
    }

    var queryTag = queryDictionary.ContainsKey("tag") ? HttpUtility.UrlDecode(queryDictionary["tag"]) : "";

    var centerHeadLine = (Model?.Value<bool>("centerHeadlineText") == true) ? "center-headline" : "";
    var sidebarBlockGrid = Model?.Value<BlockGridModel>("sidebarBlockEditor");
    var contactInfoHub = Model?.Value<BlockGridModel>("contactInfoSection");

    var selection = Umbraco.Content(Guid.Parse("425d10f8-55b9-42a7-aa7b-d98e352433bc"))?
    .ChildrenOfType("projectItemTemplate")?
    .Where(x => x.IsVisible());

    if (!string.IsNullOrEmpty(queryTag))
    {
        selection = selection.Where(x => x.Value<IEnumerable<string>>("projectTags").Count() > 0 && x.Value<IEnumerable<string>>("projectTags").Any(tag => tag.Contains(queryTag)));
    }

    var name = "";
    var link = "";
    var image = "";
    var preamble = "";
    var datePublished = "";
    IEnumerable<string> tags = [];
    List<string> sortedTags = [];

    var itemsPerPage = 4;

    if (!int.TryParse(Context.Request.Query["page"], out int currentPage))
    {
        currentPage = 1;
    }

    var totalItems = selection?.Count() ?? 0;
    var pagedItems = selection?.Skip((currentPage - 1) * itemsPerPage).Take(itemsPerPage);
}

@await Html.PartialAsync("./partials/static/breadcrumbs.cshtml")

<section id="our-projects" class="spacing-bottom list-page bg-light">
    <div class="container">
        @if (!string.IsNullOrEmpty(Model?.Value("customHeadLine")?.ToString()))
        {
            <div class="headline @centerHeadLine">
                <h2 class="title">@Model.Value("customHeadLine")</h2>
            </div>
        }

        <div class="project-grid-container">
            @if (pagedItems != null)
            {
                foreach (var item in pagedItems)
                {
                    if (item != null)
                    {
                        name = item.Name;
                        link = item?.Url().TrimEnd("/");
                        image = item?.Value<IPublishedContent>("thumbnailImage")?.Url() ?? "";
                        preamble = item?.Value<string>("preamble") ?? "";
                        datePublished = item?.Value<DateTime>("datePublished").ToString("MMMM dd, yyyy") ?? null;
                        
                        <a href="@link" class="projects-box">
                            <div class="image-wrapper">
                                <img src="@image" alt="@name">
                            </div>
                            <div class="text-wrapper">
                                <h4>@name</h4>
                                <p class="date"><i class="fa-duotone fa-solid fa-calendar-days"></i>@datePublished</p>
                                <p class="ingress">@preamble</p>
                                <h4 class="read-more">Read more<span><i class="fa-solid fa-arrow-right-long"></i></span></h4>
                            </div>
                        </a>

                        tags = item?.Value<IEnumerable<string>>("projectTags")!;

                        @foreach (string tag in tags!)
                        {
                            string trimmedTag = tag.Trim();
                            if (!sortedTags.Any(t => t.Equals(trimmedTag, StringComparison.OrdinalIgnoreCase)))
                            {
                                sortedTags.Add(trimmedTag);
                            }
                        }
                    }
                }
            }

            <div class="pagination bg-light">

                @if (currentPage > 1)
                {
                    <a href="?page=@(currentPage - 1)" class="prev-next">Prev</a>
                }
                else
                {
                    <p href="?page=@(currentPage)" class="prev-next inactive">Prev</p>
                }

                <div class="pages">
                    @for (int i = 1; i <= Math.Ceiling((decimal)totalItems / itemsPerPage); i++)
                    {
                        <a href="?page=@i" class="@((i == currentPage) ? "btn-pagination active" : "btn-pagination")">@i</a>
                    }
                </div>

                @if (currentPage < Math.Ceiling((decimal)totalItems / itemsPerPage))
                {
                    <a href="?page=@(currentPage + 1)" class="prev-next">Next</a>
                }
                else
                {
                    <p class="prev-next inactive">Next</p>
                }
            </div>
        </div>

        @if (sidebarBlockGrid != null)
        {
            <div class="sidebar-divider"></div>
        }

        @if (sidebarBlockGrid != null)
        {
            @await Html.GetBlockGridHtmlAsync(sidebarBlockGrid)
        }
    </div>
</section>

@if (contactInfoHub != null)
{
    @await Html.GetBlockGridHtmlAsync(contactInfoHub)
}